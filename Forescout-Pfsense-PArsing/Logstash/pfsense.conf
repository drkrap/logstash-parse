input {
  tcp {
    port => 514
    codec => plain
  }
  udp {
    port => 514
    codec => plain
  }
}

filter {
  grok {
    match => {
      "message" => "\[hwtype=1 (?<mac>(?:[0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2})\].*?lease (?<ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b)"
    }
    tag_on_failure => ["_grokparsefailure"]
  }

  if "_grokparsefailure" not in [tags] {
    mutate {
      update => {
        "message" => "IP: %{ip}, MAC: %{mac}"
      }
    }
    ruby {
      code => "
        mac = event.get('mac')
        mac = mac.gsub(':', '')
        event.set('mac', mac)
      "
    }
    mutate {
      update => {
        "message" => "IP: %{ip}, MAC: %{mac}"
      }
    }
  }

  if "_grokparsefailure" in [tags] {
    drop {}
  }
}
output {
  # Output to console for debugging
#  stdout {
#    codec => line { format => "%{message}" }
#  }

  # Output to remote syslog server
#  syslog {
#    host => "172.27.10.14"  # Reemplaza "OTRO_EQUIPO_IP" con la IP del equipo de destino
#    port => 5114
#    protocol => "tcp"  # Puedes cambiar a "udp" si es necesario
#    rfc => "rfc5424"
#    appname => "logstash"
#    msgid => "logstash"
#    severity => "informational"
#    facility => "local0"
#    sourcehost => "logstash"
#    message => "%{message}"
#  }
  syslog {
    host => "172.27.1.50"  # Reemplaza "OTRO_EQUIPO_IP" con la IP del equipo de destino
    port => 5544
    protocol => "tcp"  # Puedes cambiar a "udp" si es necesario
    rfc => "rfc5424"
    appname => "logstash"
    msgid => "logstash"
    severity => "informational"
    facility => "local0"
    sourcehost => "logstash"
    message => "%{message}"
  }

}

